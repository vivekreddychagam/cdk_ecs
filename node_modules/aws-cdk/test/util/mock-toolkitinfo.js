"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockToolkitInfo = void 0;
const lib_1 = require("../../lib");
function mockLike() {
    return jest.fn();
}
class MockToolkitInfo extends lib_1.ToolkitInfo {
    constructor(sdk, props = {}) {
        var _a, _b, _c;
        super(sdk);
        this.found = true;
        this.prepareEcrRepository = mockLike();
        this.bucketName = (_a = props.bucketName) !== null && _a !== void 0 ? _a : 'MockToolkitBucketName';
        this.bucketUrl = (_b = props.bucketUrl) !== null && _b !== void 0 ? _b : `https://${this.bucketName}.s3.amazonaws.com/`;
        this.version = (_c = props.version) !== null && _c !== void 0 ? _c : 1;
        this._bootstrapStack = props.bootstrapStack;
    }
    get bootstrapStack() {
        if (!this._bootstrapStack) {
            throw new Error('Bootstrap stack object expected but not supplied to MockToolkitInfo');
        }
        return this._bootstrapStack;
    }
    async validateVersion(expectedVersion, ssmParameterName) {
        const version = ssmParameterName !== undefined ? await this.versionFromSsmParameter(ssmParameterName) : this.version;
        if (expectedVersion > version) {
            throw new Error(`This CDK deployment requires bootstrap stack version '${expectedVersion}', found '${version}'. Please run 'cdk bootstrap' with a newer CLI version.`);
        }
    }
}
exports.MockToolkitInfo = MockToolkitInfo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay10b29sa2l0aW5mby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1vY2stdG9vbGtpdGluZm8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUNBQThDO0FBVTlDLFNBQVMsUUFBUTtJQUNmLE9BQU8sSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO0FBQ25CLENBQUM7QUFFRCxNQUFhLGVBQWdCLFNBQVEsaUJBQVc7SUFTOUMsWUFBWSxHQUFTLEVBQUUsUUFBOEIsRUFBRTs7UUFDckQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBVEcsVUFBSyxHQUFHLElBQUksQ0FBQztRQUliLHlCQUFvQixHQUFHLFFBQVEsRUFBcUQsQ0FBQztRQU9uRyxJQUFJLENBQUMsVUFBVSxTQUFHLEtBQUssQ0FBQyxVQUFVLG1DQUFJLHVCQUF1QixDQUFDO1FBQzlELElBQUksQ0FBQyxTQUFTLFNBQUcsS0FBSyxDQUFDLFNBQVMsbUNBQUksV0FBVyxJQUFJLENBQUMsVUFBVSxvQkFBb0IsQ0FBQztRQUNuRixJQUFJLENBQUMsT0FBTyxTQUFHLEtBQUssQ0FBQyxPQUFPLG1DQUFJLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUM7SUFDOUMsQ0FBQztJQUVELElBQVcsY0FBYztRQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN6QixNQUFNLElBQUksS0FBSyxDQUFDLHFFQUFxRSxDQUFDLENBQUM7U0FDeEY7UUFDRCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUM7SUFDOUIsQ0FBQztJQUVNLEtBQUssQ0FBQyxlQUFlLENBQUMsZUFBdUIsRUFBRSxnQkFBb0M7UUFDeEYsTUFBTSxPQUFPLEdBQUcsZ0JBQWdCLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBRXJILElBQUksZUFBZSxHQUFHLE9BQU8sRUFBRTtZQUM3QixNQUFNLElBQUksS0FBSyxDQUFDLHlEQUF5RCxlQUFlLGFBQWEsT0FBTyx5REFBeUQsQ0FBQyxDQUFDO1NBQ3hLO0lBQ0gsQ0FBQztDQUNGO0FBaENELDBDQWdDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElTREssIFRvb2xraXRJbmZvIH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCB7IENsb3VkRm9ybWF0aW9uU3RhY2sgfSBmcm9tICcuLi8uLi9saWIvYXBpL3V0aWwvY2xvdWRmb3JtYXRpb24nO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1vY2tUb29sa2l0SW5mb1Byb3BzIHtcbiAgcmVhZG9ubHkgYnVja2V0TmFtZT86IHN0cmluZztcbiAgcmVhZG9ubHkgYnVja2V0VXJsPzogc3RyaW5nO1xuICByZWFkb25seSB2ZXJzaW9uPzogbnVtYmVyO1xuICByZWFkb25seSBib290c3RyYXBTdGFjaz86IENsb3VkRm9ybWF0aW9uU3RhY2s7XG59XG5cbmZ1bmN0aW9uIG1vY2tMaWtlPEEgZXh0ZW5kcyAoLi4uYXJnczogYW55KSA9PiBhbnk+KCk6IGplc3QuTW9jazxSZXR1cm5UeXBlPEE+LCBQYXJhbWV0ZXJzPEE+PiB7XG4gIHJldHVybiBqZXN0LmZuKCk7XG59XG5cbmV4cG9ydCBjbGFzcyBNb2NrVG9vbGtpdEluZm8gZXh0ZW5kcyBUb29sa2l0SW5mbyB7XG4gIHB1YmxpYyByZWFkb25seSBmb3VuZCA9IHRydWU7XG4gIHB1YmxpYyByZWFkb25seSBidWNrZXRVcmw6IHN0cmluZztcbiAgcHVibGljIHJlYWRvbmx5IGJ1Y2tldE5hbWU6IHN0cmluZztcbiAgcHVibGljIHJlYWRvbmx5IHZlcnNpb246IG51bWJlcjtcbiAgcHVibGljIHJlYWRvbmx5IHByZXBhcmVFY3JSZXBvc2l0b3J5ID0gbW9ja0xpa2U8dHlwZW9mIFRvb2xraXRJbmZvLnByb3RvdHlwZS5wcmVwYXJlRWNyUmVwb3NpdG9yeT4oKTtcblxuICBwcml2YXRlIHJlYWRvbmx5IF9ib290c3RyYXBTdGFjaz86IENsb3VkRm9ybWF0aW9uU3RhY2s7XG5cbiAgY29uc3RydWN0b3Ioc2RrOiBJU0RLLCBwcm9wczogTW9ja1Rvb2xraXRJbmZvUHJvcHMgPSB7fSkge1xuICAgIHN1cGVyKHNkayk7XG5cbiAgICB0aGlzLmJ1Y2tldE5hbWUgPSBwcm9wcy5idWNrZXROYW1lID8/ICdNb2NrVG9vbGtpdEJ1Y2tldE5hbWUnO1xuICAgIHRoaXMuYnVja2V0VXJsID0gcHJvcHMuYnVja2V0VXJsID8/IGBodHRwczovLyR7dGhpcy5idWNrZXROYW1lfS5zMy5hbWF6b25hd3MuY29tL2A7XG4gICAgdGhpcy52ZXJzaW9uID0gcHJvcHMudmVyc2lvbiA/PyAxO1xuICAgIHRoaXMuX2Jvb3RzdHJhcFN0YWNrID0gcHJvcHMuYm9vdHN0cmFwU3RhY2s7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGJvb3RzdHJhcFN0YWNrKCk6IENsb3VkRm9ybWF0aW9uU3RhY2sge1xuICAgIGlmICghdGhpcy5fYm9vdHN0cmFwU3RhY2spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQm9vdHN0cmFwIHN0YWNrIG9iamVjdCBleHBlY3RlZCBidXQgbm90IHN1cHBsaWVkIHRvIE1vY2tUb29sa2l0SW5mbycpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fYm9vdHN0cmFwU3RhY2s7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgdmFsaWRhdGVWZXJzaW9uKGV4cGVjdGVkVmVyc2lvbjogbnVtYmVyLCBzc21QYXJhbWV0ZXJOYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCB2ZXJzaW9uID0gc3NtUGFyYW1ldGVyTmFtZSAhPT0gdW5kZWZpbmVkID8gYXdhaXQgdGhpcy52ZXJzaW9uRnJvbVNzbVBhcmFtZXRlcihzc21QYXJhbWV0ZXJOYW1lKSA6IHRoaXMudmVyc2lvbjtcblxuICAgIGlmIChleHBlY3RlZFZlcnNpb24gPiB2ZXJzaW9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoaXMgQ0RLIGRlcGxveW1lbnQgcmVxdWlyZXMgYm9vdHN0cmFwIHN0YWNrIHZlcnNpb24gJyR7ZXhwZWN0ZWRWZXJzaW9ufScsIGZvdW5kICcke3ZlcnNpb259Jy4gUGxlYXNlIHJ1biAnY2RrIGJvb3RzdHJhcCcgd2l0aCBhIG5ld2VyIENMSSB2ZXJzaW9uLmApO1xuICAgIH1cbiAgfVxufSJdfQ==